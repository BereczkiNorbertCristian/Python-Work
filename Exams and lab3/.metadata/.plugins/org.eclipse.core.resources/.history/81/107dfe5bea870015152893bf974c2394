'''
Created on Oct 31, 2015

@author: Norbi
'''

class Validator :
    @staticmethod
    def read_positive_integer(message):
        """
        Reads a positive integer
        input:message
        output:n as integer no
        """
        n=-1
        while n < 0 :
            try:
                n=int (input (message))
            except ValueError:
                print("Please insert a number that is positive")
    
        return n
    @staticmethod
    def read_day(message):
        """
        Reads day between 1-31
        """
        day=-1
        while not (day>1 and day<32):
            try:
                day=int(input(message))
                return day
            except ValueError:
                print("Please introduce a day betweem 1-31")    
    @staticmethod        
    def read_month(message):
        """
        Reads a month between 1-12
        """
        month=-1
        while month < 1 or month > 12 :
            try:
                month=int(input(message))
                return month
            except ValueError:            
                print("Please introduce a month between 1-12")
    @staticmethod        
    def read_year(message):
        """
        reads a year
        """
        return Validator.read_positive_integer(message)
    @staticmethod
    def simple_read(message):
     
        n=input(message)
        return n
    @staticmethod
    def read_good_option(op_list):
        """
        Reads an option between list op_list
        if enter is pressed too early then message
        """
        try :
            option= int (input("choose option:"))
        except ValueError :
            print("""Don't be hasty!
You have not introduced antyhing.""")
            return 
        
        while not option in op_list: 
            option=int(input("Please introduce an option between" + str(op_list)))
        return option
    @staticmethod
    def sverifyid(verifstud,studrepo):
        """
        Verifies if id of student is in the list of students
        Input:student and repository of students
        Output:0 if founnd
        1 if not found
        """
        if not studrepo.get_list() :
            return 1 
    
        for stud in studrepo.get_list() :
            if verifstud.get_id() == stud.get_id() :
                return 0
            return 1

    @staticmethod
    def averifyid(verifassign,assignrepo):
        """
        Verifies if id is in list of assignments
        Input: student with the id which will be verified, repository of assginments
        Output:0 if found
        1 if not found
        """
        if not assignrepo.get_list() :
            return 1
    
        for assign in assignrepo.get_list() :
            if verifassign.get_id() == assign.get_id() :
                return 0
            return 1

from Repository.StudRepo import *
from Repository.AssignRepo import *
def veriftest():
    m=student_repository()
    s=Students(5,"john",7)
    s1=Students(6,"marry",8)
    
    m.add(s)
    m.add(s1)
    
    ver=Students(5,"",0)
    Validator.sverifyid(ver, m)
    
veriftest()

class ObjectException(Exception):
    
    def __init__(self,msg):
        self.__msg=msg
        
    def __str__(self):
        return self.__msg
    
            